// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testFiatValues(t *testing.T) {
	t.Parallel()

	query := FiatValues(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFiatValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = fiatValue.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFiatValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FiatValues(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFiatValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FiatValueSlice{fiatValue}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFiatValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FiatValueExists(tx, fiatValue.ID)
	if err != nil {
		t.Errorf("Unable to check if FiatValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FiatValueExistsG to return true, but got false.")
	}
}
func testFiatValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	fiatValueFound, err := FindFiatValue(tx, fiatValue.ID)
	if err != nil {
		t.Error(err)
	}

	if fiatValueFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFiatValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = FiatValues(tx).Bind(fiatValue); err != nil {
		t.Error(err)
	}
}

func testFiatValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := FiatValues(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFiatValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValueOne := &FiatValue{}
	fiatValueTwo := &FiatValue{}
	if err = randomize.Struct(seed, fiatValueOne, fiatValueDBTypes, false, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}
	if err = randomize.Struct(seed, fiatValueTwo, fiatValueDBTypes, false, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValueOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = fiatValueTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FiatValues(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFiatValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fiatValueOne := &FiatValue{}
	fiatValueTwo := &FiatValue{}
	if err = randomize.Struct(seed, fiatValueOne, fiatValueDBTypes, false, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}
	if err = randomize.Struct(seed, fiatValueTwo, fiatValueDBTypes, false, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValueOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = fiatValueTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func fiatValueBeforeInsertHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueAfterInsertHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueAfterSelectHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueBeforeUpdateHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueAfterUpdateHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueBeforeDeleteHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueAfterDeleteHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueBeforeUpsertHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func fiatValueAfterUpsertHook(e boil.Executor, o *FiatValue) error {
	*o = FiatValue{}
	return nil
}

func testFiatValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &FiatValue{}
	o := &FiatValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fiatValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FiatValue object: %s", err)
	}

	AddFiatValueHook(boil.BeforeInsertHook, fiatValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fiatValueBeforeInsertHooks = []FiatValueHook{}

	AddFiatValueHook(boil.AfterInsertHook, fiatValueAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fiatValueAfterInsertHooks = []FiatValueHook{}

	AddFiatValueHook(boil.AfterSelectHook, fiatValueAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fiatValueAfterSelectHooks = []FiatValueHook{}

	AddFiatValueHook(boil.BeforeUpdateHook, fiatValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fiatValueBeforeUpdateHooks = []FiatValueHook{}

	AddFiatValueHook(boil.AfterUpdateHook, fiatValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fiatValueAfterUpdateHooks = []FiatValueHook{}

	AddFiatValueHook(boil.BeforeDeleteHook, fiatValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fiatValueBeforeDeleteHooks = []FiatValueHook{}

	AddFiatValueHook(boil.AfterDeleteHook, fiatValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fiatValueAfterDeleteHooks = []FiatValueHook{}

	AddFiatValueHook(boil.BeforeUpsertHook, fiatValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fiatValueBeforeUpsertHooks = []FiatValueHook{}

	AddFiatValueHook(boil.AfterUpsertHook, fiatValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fiatValueAfterUpsertHooks = []FiatValueHook{}
}
func testFiatValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFiatValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx, fiatValueColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFiatValueToOneBalanceUsingBalance(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local FiatValue
	var foreign Balance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fiatValueDBTypes, false, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, balanceDBTypes, false, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.BalanceID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Balance(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FiatValueSlice{&local}
	if err = local.L.LoadBalance(tx, false, (*[]*FiatValue)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Balance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Balance = nil
	if err = local.L.LoadBalance(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Balance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFiatValueToOneSetOpBalanceUsingBalance(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a FiatValue
	var b, c Balance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fiatValueDBTypes, false, strmangle.SetComplement(fiatValuePrimaryKeyColumns, fiatValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, balanceDBTypes, false, strmangle.SetComplement(balancePrimaryKeyColumns, balanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, balanceDBTypes, false, strmangle.SetComplement(balancePrimaryKeyColumns, balanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Balance{&b, &c} {
		err = a.SetBalance(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Balance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FiatValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BalanceID != x.ID {
			t.Error("foreign key was wrong value", a.BalanceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BalanceID))
		reflect.Indirect(reflect.ValueOf(&a.BalanceID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BalanceID != x.ID {
			t.Error("foreign key was wrong value", a.BalanceID, x.ID)
		}
	}
}
func testFiatValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = fiatValue.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFiatValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FiatValueSlice{fiatValue}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFiatValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := FiatValues(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fiatValueDBTypes = map[string]string{`Amount`: `numeric`, `AmountCents`: `bigint`, `BalanceID`: `integer`, `CreatedAt`: `timestamp without time zone`, `Currency`: `character varying`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testFiatValuesUpdate(t *testing.T) {
	t.Parallel()

	if len(fiatValueColumns) == len(fiatValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	if err = fiatValue.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFiatValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fiatValueColumns) == len(fiatValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	fiatValue := &FiatValue{}
	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, fiatValue, fiatValueDBTypes, true, fiatValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fiatValueColumns, fiatValuePrimaryKeyColumns) {
		fields = fiatValueColumns
	} else {
		fields = strmangle.SetComplement(
			fiatValueColumns,
			fiatValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(fiatValue))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FiatValueSlice{fiatValue}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFiatValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(fiatValueColumns) == len(fiatValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	fiatValue := FiatValue{}
	if err = randomize.Struct(seed, &fiatValue, fiatValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = fiatValue.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert FiatValue: %s", err)
	}

	count, err := FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &fiatValue, fiatValueDBTypes, false, fiatValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FiatValue struct: %s", err)
	}

	if err = fiatValue.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert FiatValue: %s", err)
	}

	count, err = FiatValues(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
