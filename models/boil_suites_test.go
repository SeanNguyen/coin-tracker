// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Balances", testBalances)
	t.Run("FiatValues", testFiatValues)
	t.Run("Snapshots", testSnapshots)
}

func TestDelete(t *testing.T) {
	t.Run("Balances", testBalancesDelete)
	t.Run("FiatValues", testFiatValuesDelete)
	t.Run("Snapshots", testSnapshotsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Balances", testBalancesQueryDeleteAll)
	t.Run("FiatValues", testFiatValuesQueryDeleteAll)
	t.Run("Snapshots", testSnapshotsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Balances", testBalancesSliceDeleteAll)
	t.Run("FiatValues", testFiatValuesSliceDeleteAll)
	t.Run("Snapshots", testSnapshotsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Balances", testBalancesExists)
	t.Run("FiatValues", testFiatValuesExists)
	t.Run("Snapshots", testSnapshotsExists)
}

func TestFind(t *testing.T) {
	t.Run("Balances", testBalancesFind)
	t.Run("FiatValues", testFiatValuesFind)
	t.Run("Snapshots", testSnapshotsFind)
}

func TestBind(t *testing.T) {
	t.Run("Balances", testBalancesBind)
	t.Run("FiatValues", testFiatValuesBind)
	t.Run("Snapshots", testSnapshotsBind)
}

func TestOne(t *testing.T) {
	t.Run("Balances", testBalancesOne)
	t.Run("FiatValues", testFiatValuesOne)
	t.Run("Snapshots", testSnapshotsOne)
}

func TestAll(t *testing.T) {
	t.Run("Balances", testBalancesAll)
	t.Run("FiatValues", testFiatValuesAll)
	t.Run("Snapshots", testSnapshotsAll)
}

func TestCount(t *testing.T) {
	t.Run("Balances", testBalancesCount)
	t.Run("FiatValues", testFiatValuesCount)
	t.Run("Snapshots", testSnapshotsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Balances", testBalancesHooks)
	t.Run("FiatValues", testFiatValuesHooks)
	t.Run("Snapshots", testSnapshotsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Balances", testBalancesInsert)
	t.Run("Balances", testBalancesInsertWhitelist)
	t.Run("FiatValues", testFiatValuesInsert)
	t.Run("FiatValues", testFiatValuesInsertWhitelist)
	t.Run("Snapshots", testSnapshotsInsert)
	t.Run("Snapshots", testSnapshotsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BalanceToSnapshotUsingSnapshot", testBalanceToOneSnapshotUsingSnapshot)
	t.Run("FiatValueToBalanceUsingBalance", testFiatValueToOneBalanceUsingBalance)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BalanceToFiatValues", testBalanceToManyFiatValues)
	t.Run("SnapshotToBalances", testSnapshotToManyBalances)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BalanceToSnapshotUsingSnapshot", testBalanceToOneSetOpSnapshotUsingSnapshot)
	t.Run("FiatValueToBalanceUsingBalance", testFiatValueToOneSetOpBalanceUsingBalance)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BalanceToFiatValues", testBalanceToManyAddOpFiatValues)
	t.Run("SnapshotToBalances", testSnapshotToManyAddOpBalances)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Balances", testBalancesReload)
	t.Run("FiatValues", testFiatValuesReload)
	t.Run("Snapshots", testSnapshotsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Balances", testBalancesReloadAll)
	t.Run("FiatValues", testFiatValuesReloadAll)
	t.Run("Snapshots", testSnapshotsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Balances", testBalancesSelect)
	t.Run("FiatValues", testFiatValuesSelect)
	t.Run("Snapshots", testSnapshotsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Balances", testBalancesUpdate)
	t.Run("FiatValues", testFiatValuesUpdate)
	t.Run("Snapshots", testSnapshotsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Balances", testBalancesSliceUpdateAll)
	t.Run("FiatValues", testFiatValuesSliceUpdateAll)
	t.Run("Snapshots", testSnapshotsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Balances", testBalancesUpsert)
	t.Run("FiatValues", testFiatValuesUpsert)
	t.Run("Snapshots", testSnapshotsUpsert)
}
