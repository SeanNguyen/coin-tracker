// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBalances(t *testing.T) {
	t.Parallel()

	query := Balances(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBalancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = balance.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBalancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Balances(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBalancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BalanceSlice{balance}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBalancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BalanceExists(tx, balance.ID)
	if err != nil {
		t.Errorf("Unable to check if Balance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BalanceExistsG to return true, but got false.")
	}
}
func testBalancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	balanceFound, err := FindBalance(tx, balance.ID)
	if err != nil {
		t.Error(err)
	}

	if balanceFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBalancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Balances(tx).Bind(balance); err != nil {
		t.Error(err)
	}
}

func testBalancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Balances(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBalancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balanceOne := &Balance{}
	balanceTwo := &Balance{}
	if err = randomize.Struct(seed, balanceOne, balanceDBTypes, false, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}
	if err = randomize.Struct(seed, balanceTwo, balanceDBTypes, false, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balanceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = balanceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Balances(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBalancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	balanceOne := &Balance{}
	balanceTwo := &Balance{}
	if err = randomize.Struct(seed, balanceOne, balanceDBTypes, false, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}
	if err = randomize.Struct(seed, balanceTwo, balanceDBTypes, false, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balanceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = balanceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func balanceBeforeInsertHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceAfterInsertHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceAfterSelectHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceBeforeUpdateHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceAfterUpdateHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceBeforeDeleteHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceAfterDeleteHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceBeforeUpsertHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func balanceAfterUpsertHook(e boil.Executor, o *Balance) error {
	*o = Balance{}
	return nil
}

func testBalancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Balance{}
	o := &Balance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, balanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Balance object: %s", err)
	}

	AddBalanceHook(boil.BeforeInsertHook, balanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	balanceBeforeInsertHooks = []BalanceHook{}

	AddBalanceHook(boil.AfterInsertHook, balanceAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	balanceAfterInsertHooks = []BalanceHook{}

	AddBalanceHook(boil.AfterSelectHook, balanceAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	balanceAfterSelectHooks = []BalanceHook{}

	AddBalanceHook(boil.BeforeUpdateHook, balanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	balanceBeforeUpdateHooks = []BalanceHook{}

	AddBalanceHook(boil.AfterUpdateHook, balanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	balanceAfterUpdateHooks = []BalanceHook{}

	AddBalanceHook(boil.BeforeDeleteHook, balanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	balanceBeforeDeleteHooks = []BalanceHook{}

	AddBalanceHook(boil.AfterDeleteHook, balanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	balanceAfterDeleteHooks = []BalanceHook{}

	AddBalanceHook(boil.BeforeUpsertHook, balanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	balanceBeforeUpsertHooks = []BalanceHook{}

	AddBalanceHook(boil.AfterUpsertHook, balanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	balanceAfterUpsertHooks = []BalanceHook{}
}
func testBalancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBalancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx, balanceColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBalanceToManyFiatValues(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Balance
	var b, c FiatValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, fiatValueDBTypes, false, fiatValueColumnsWithDefault...)
	randomize.Struct(seed, &c, fiatValueDBTypes, false, fiatValueColumnsWithDefault...)

	b.BalanceID = a.ID
	c.BalanceID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	fiatValue, err := a.FiatValues(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range fiatValue {
		if v.BalanceID == b.BalanceID {
			bFound = true
		}
		if v.BalanceID == c.BalanceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BalanceSlice{&a}
	if err = a.L.LoadFiatValues(tx, false, (*[]*Balance)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FiatValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FiatValues = nil
	if err = a.L.LoadFiatValues(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FiatValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", fiatValue)
	}
}

func testBalanceToManyAddOpFiatValues(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Balance
	var b, c, d, e FiatValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, balanceDBTypes, false, strmangle.SetComplement(balancePrimaryKeyColumns, balanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FiatValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fiatValueDBTypes, false, strmangle.SetComplement(fiatValuePrimaryKeyColumns, fiatValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FiatValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFiatValues(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BalanceID {
			t.Error("foreign key was wrong value", a.ID, first.BalanceID)
		}
		if a.ID != second.BalanceID {
			t.Error("foreign key was wrong value", a.ID, second.BalanceID)
		}

		if first.R.Balance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Balance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FiatValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FiatValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FiatValues(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBalanceToOneSnapshotUsingSnapshot(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Balance
	var foreign Snapshot

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, balanceDBTypes, false, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, snapshotDBTypes, false, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SnapshotID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Snapshot(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BalanceSlice{&local}
	if err = local.L.LoadSnapshot(tx, false, (*[]*Balance)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Snapshot == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Snapshot = nil
	if err = local.L.LoadSnapshot(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Snapshot == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBalanceToOneSetOpSnapshotUsingSnapshot(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Balance
	var b, c Snapshot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, balanceDBTypes, false, strmangle.SetComplement(balancePrimaryKeyColumns, balanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, snapshotDBTypes, false, strmangle.SetComplement(snapshotPrimaryKeyColumns, snapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, snapshotDBTypes, false, strmangle.SetComplement(snapshotPrimaryKeyColumns, snapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Snapshot{&b, &c} {
		err = a.SetSnapshot(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Snapshot != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Balances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SnapshotID != x.ID {
			t.Error("foreign key was wrong value", a.SnapshotID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SnapshotID))
		reflect.Indirect(reflect.ValueOf(&a.SnapshotID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SnapshotID != x.ID {
			t.Error("foreign key was wrong value", a.SnapshotID, x.ID)
		}
	}
}
func testBalancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = balance.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBalancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BalanceSlice{balance}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBalancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Balances(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	balanceDBTypes = map[string]string{`Amount`: `numeric`, `CreatedAt`: `timestamp without time zone`, `Currency`: `character varying`, `ExchangeName`: `character varying`, `ID`: `integer`, `SnapshotID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testBalancesUpdate(t *testing.T) {
	t.Parallel()

	if len(balanceColumns) == len(balancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	if err = balance.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBalancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(balanceColumns) == len(balancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	balance := &Balance{}
	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, balance, balanceDBTypes, true, balancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(balanceColumns, balancePrimaryKeyColumns) {
		fields = balanceColumns
	} else {
		fields = strmangle.SetComplement(
			balanceColumns,
			balancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(balance))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BalanceSlice{balance}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBalancesUpsert(t *testing.T) {
	t.Parallel()

	if len(balanceColumns) == len(balancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	balance := Balance{}
	if err = randomize.Struct(seed, &balance, balanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = balance.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Balance: %s", err)
	}

	count, err := Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &balance, balanceDBTypes, false, balancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Balance struct: %s", err)
	}

	if err = balance.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Balance: %s", err)
	}

	count, err = Balances(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
