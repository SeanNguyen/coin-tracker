// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSnapshots(t *testing.T) {
	t.Parallel()

	query := Snapshots(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSnapshotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = snapshot.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSnapshotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Snapshots(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSnapshotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SnapshotSlice{snapshot}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSnapshotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SnapshotExists(tx, snapshot.ID)
	if err != nil {
		t.Errorf("Unable to check if Snapshot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SnapshotExistsG to return true, but got false.")
	}
}
func testSnapshotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	snapshotFound, err := FindSnapshot(tx, snapshot.ID)
	if err != nil {
		t.Error(err)
	}

	if snapshotFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSnapshotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Snapshots(tx).Bind(snapshot); err != nil {
		t.Error(err)
	}
}

func testSnapshotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Snapshots(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSnapshotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshotOne := &Snapshot{}
	snapshotTwo := &Snapshot{}
	if err = randomize.Struct(seed, snapshotOne, snapshotDBTypes, false, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}
	if err = randomize.Struct(seed, snapshotTwo, snapshotDBTypes, false, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshotOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = snapshotTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Snapshots(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSnapshotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	snapshotOne := &Snapshot{}
	snapshotTwo := &Snapshot{}
	if err = randomize.Struct(seed, snapshotOne, snapshotDBTypes, false, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}
	if err = randomize.Struct(seed, snapshotTwo, snapshotDBTypes, false, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshotOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = snapshotTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func snapshotBeforeInsertHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotAfterInsertHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotAfterSelectHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotBeforeUpdateHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotAfterUpdateHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotBeforeDeleteHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotAfterDeleteHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotBeforeUpsertHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func snapshotAfterUpsertHook(e boil.Executor, o *Snapshot) error {
	*o = Snapshot{}
	return nil
}

func testSnapshotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Snapshot{}
	o := &Snapshot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, snapshotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Snapshot object: %s", err)
	}

	AddSnapshotHook(boil.BeforeInsertHook, snapshotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	snapshotBeforeInsertHooks = []SnapshotHook{}

	AddSnapshotHook(boil.AfterInsertHook, snapshotAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	snapshotAfterInsertHooks = []SnapshotHook{}

	AddSnapshotHook(boil.AfterSelectHook, snapshotAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	snapshotAfterSelectHooks = []SnapshotHook{}

	AddSnapshotHook(boil.BeforeUpdateHook, snapshotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	snapshotBeforeUpdateHooks = []SnapshotHook{}

	AddSnapshotHook(boil.AfterUpdateHook, snapshotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	snapshotAfterUpdateHooks = []SnapshotHook{}

	AddSnapshotHook(boil.BeforeDeleteHook, snapshotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	snapshotBeforeDeleteHooks = []SnapshotHook{}

	AddSnapshotHook(boil.AfterDeleteHook, snapshotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	snapshotAfterDeleteHooks = []SnapshotHook{}

	AddSnapshotHook(boil.BeforeUpsertHook, snapshotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	snapshotBeforeUpsertHooks = []SnapshotHook{}

	AddSnapshotHook(boil.AfterUpsertHook, snapshotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	snapshotAfterUpsertHooks = []SnapshotHook{}
}
func testSnapshotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSnapshotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx, snapshotColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSnapshotToManyBalances(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Snapshot
	var b, c Balance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, balanceDBTypes, false, balanceColumnsWithDefault...)
	randomize.Struct(seed, &c, balanceDBTypes, false, balanceColumnsWithDefault...)

	b.SnapshotID = a.ID
	c.SnapshotID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	balance, err := a.Balances(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range balance {
		if v.SnapshotID == b.SnapshotID {
			bFound = true
		}
		if v.SnapshotID == c.SnapshotID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SnapshotSlice{&a}
	if err = a.L.LoadBalances(tx, false, (*[]*Snapshot)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Balances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Balances = nil
	if err = a.L.LoadBalances(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Balances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", balance)
	}
}

func testSnapshotToManyAddOpBalances(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Snapshot
	var b, c, d, e Balance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, snapshotDBTypes, false, strmangle.SetComplement(snapshotPrimaryKeyColumns, snapshotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Balance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, balanceDBTypes, false, strmangle.SetComplement(balancePrimaryKeyColumns, balanceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Balance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBalances(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SnapshotID {
			t.Error("foreign key was wrong value", a.ID, first.SnapshotID)
		}
		if a.ID != second.SnapshotID {
			t.Error("foreign key was wrong value", a.ID, second.SnapshotID)
		}

		if first.R.Snapshot != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Snapshot != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Balances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Balances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Balances(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSnapshotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = snapshot.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSnapshotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SnapshotSlice{snapshot}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSnapshotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Snapshots(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	snapshotDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testSnapshotsUpdate(t *testing.T) {
	t.Parallel()

	if len(snapshotColumns) == len(snapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	if err = snapshot.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSnapshotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(snapshotColumns) == len(snapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	snapshot := &Snapshot{}
	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, snapshot, snapshotDBTypes, true, snapshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(snapshotColumns, snapshotPrimaryKeyColumns) {
		fields = snapshotColumns
	} else {
		fields = strmangle.SetComplement(
			snapshotColumns,
			snapshotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(snapshot))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SnapshotSlice{snapshot}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSnapshotsUpsert(t *testing.T) {
	t.Parallel()

	if len(snapshotColumns) == len(snapshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	snapshot := Snapshot{}
	if err = randomize.Struct(seed, &snapshot, snapshotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = snapshot.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Snapshot: %s", err)
	}

	count, err := Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &snapshot, snapshotDBTypes, false, snapshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Snapshot struct: %s", err)
	}

	if err = snapshot.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Snapshot: %s", err)
	}

	count, err = Snapshots(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
